<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leo Lee</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-16T10:21:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leo Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用ggplot2绘制美观的柱状图</title>
    <link href="http://yoursite.com/2017/09/15/%E7%94%A8ggplot2%E7%BB%98%E5%88%B6%E7%BE%8E%E8%A7%82%E7%9A%84%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/09/15/用ggplot2绘制美观的柱状图/</id>
    <published>2017-09-15T13:39:06.700Z</published>
    <updated>2017-09-16T10:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>实习的时候看完了一本讲解<code>ggplot2</code>包的书，名字叫做《Guide to CreateBeautiful Graphics in R》。<br>老实说，这本书虽然有很多例子，但讲的很浅，也许这本书的定位就是参考手册吧。^<em>^…看完了里面柱状图的内容，感觉配色不是很美观。<br>于是乎自己动手绘制了以下的两幅柱状图，其中配色方案来自<a href="https://pudding.cool/2017/08/the-office/" target="_blank" rel="external">The Pudding</a>。感觉这个博客<br>图像的配色方案让人赏心悦目，自己就仿照着也画一画^</em>^…</p>
<a id="more"></a> 
<h2 id="图1，单因子映射"><a href="#图1，单因子映射" class="headerlink" title="图1，单因子映射"></a>图1，单因子映射</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(janeaustenr)</div><div class="line"><span class="keyword">library</span>(tidyverse)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; Warning: package &apos;tibble&apos; was built under R version 3.4.1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; Warning: package &apos;purrr&apos; was built under R version 3.4.1</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(tidytext)</div><div class="line"></div><div class="line">austen_books() %&gt;%</div><div class="line">  select(<span class="number">2</span>, <span class="number">1</span>) %&gt;%</div><div class="line">  unnest_tokens(word, text, token = <span class="string">"ngrams"</span>, n = <span class="number">2</span>) %&gt;%</div><div class="line">  print() %&gt;% </div><div class="line">  <span class="comment"># A token is a meaningful unit of text, most often a word, </span></div><div class="line">  <span class="comment"># that we are interested in using for further analysis, </span></div><div class="line">  <span class="comment"># and tokenization is the process of splitting text into tokens.</span></div><div class="line">  count(word, sort = <span class="literal">TRUE</span>) %&gt;% </div><div class="line">  top_n(<span class="number">10</span>) -&gt;</div><div class="line">  top_10_austen_bigrams</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#&gt; # A tibble: 725,049 x 2</div><div class="line">#&gt;                   book            word</div><div class="line">#&gt;                 &lt;fctr&gt;           &lt;chr&gt;</div><div class="line">#&gt;  1 Sense &amp; Sensibility       sense and</div><div class="line">#&gt;  2 Sense &amp; Sensibility and sensibility</div><div class="line">#&gt;  3 Sense &amp; Sensibility  sensibility by</div><div class="line">#&gt;  4 Sense &amp; Sensibility         by jane</div><div class="line">#&gt;  5 Sense &amp; Sensibility     jane austen</div><div class="line">#&gt;  6 Sense &amp; Sensibility     austen 1811</div><div class="line">#&gt;  7 Sense &amp; Sensibility    1811 chapter</div><div class="line">#&gt;  8 Sense &amp; Sensibility       chapter 1</div><div class="line">#&gt;  9 Sense &amp; Sensibility           1 the</div><div class="line">#&gt; 10 Sense &amp; Sensibility      the family</div><div class="line">#&gt; # ... with 725,039 more rows</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(ggthemes)</div><div class="line"></div><div class="line"><span class="comment">## 一元映射</span></div><div class="line">top_10_austen_bigrams %&gt;% </div><div class="line">  print() %&gt;% </div><div class="line">  ggplot(aes(x = reorder(word, n), y = n)) +</div><div class="line">  geom_bar(stat = <span class="string">"identity"</span>, fill = <span class="string">"#E7962A"</span>) +  <span class="comment"># `柱子`填充色为“橘黄色”</span></div><div class="line">  coord_flip() +</div><div class="line">  theme_fivethirtyeight() +</div><div class="line">  theme(panel.background = element_rect(fill = <span class="string">"#FCF0E1"</span>), <span class="comment"># 图片背景填充色为“土黄色”</span></div><div class="line">        plot.background = element_rect(fill = <span class="string">"#FCF0E1"</span>)) +</div><div class="line">  geom_text(aes(label = n), hjust = -<span class="number">0.3</span>) + <span class="comment"># hjust/vjust调整`标签`的位置</span></div><div class="line">  <span class="comment"># 标题</span></div><div class="line">  labs(title = <span class="string">"Words Frequency Count"</span>,</div><div class="line">       subtitle = <span class="string">"Made in 2017-08-25，by Leo Lee"</span>,</div><div class="line">       caption = <span class="string">"Source: janeaustenr package"</span>,</div><div class="line">       xlab = <span class="string">""</span>, ylab = <span class="string">""</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#&gt; # A tibble: 10 x 2</div><div class="line">#&gt;        word     n</div><div class="line">#&gt;       &lt;chr&gt; &lt;int&gt;</div><div class="line">#&gt;  1   of the  3017</div><div class="line">#&gt;  2    to be  2787</div><div class="line">#&gt;  3   in the  2368</div><div class="line">#&gt;  4   it was  1781</div><div class="line">#&gt;  5     i am  1545</div><div class="line">#&gt;  6  she had  1472</div><div class="line">#&gt;  7   of her  1445</div><div class="line">#&gt;  8   to the  1387</div><div class="line">#&gt;  9  she was  1377</div><div class="line">#&gt; 10 had been  1299</div></pre></td></tr></table></figure>
<p><img src="http://guangzheng.site/shiny-examples-master/blog_images/barplots2.png" alt="barplot1"></p>
<h2 id="图2，双因子映射"><a href="#图2，双因子映射" class="headerlink" title="图2，双因子映射"></a>图2，双因子映射</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">austen_books() %&gt;%</div><div class="line">  select(<span class="number">2</span>, <span class="number">1</span>) %&gt;%</div><div class="line">  filter(book %<span class="keyword">in</span>% c(<span class="string">"Sense &amp; Sensibility"</span>, <span class="string">"Pride &amp; Prejudice"</span>)) %&gt;% </div><div class="line">  unnest_tokens(word, text, token = <span class="string">"ngrams"</span>, n = <span class="number">1</span>) %&gt;%</div><div class="line">  anti_join(stop_words, by = <span class="string">"word"</span>) %&gt;% </div><div class="line">  print() %&gt;% </div><div class="line">  group_by(book) %&gt;% </div><div class="line">  count(book, word, sort = <span class="literal">TRUE</span>) %&gt;% </div><div class="line">  top_n(<span class="number">15</span>) %&gt;% </div><div class="line">  ungroup() %&gt;% </div><div class="line">  mutate(n2 = if_else(book == <span class="string">"Sense &amp; Sensibility"</span>, -n, n)) -&gt;</div><div class="line">  austen_2_books</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#&gt; # A tibble: 73,576 x 2</div><div class="line">#&gt;                   book    word</div><div class="line">#&gt;                 &lt;fctr&gt;   &lt;chr&gt;</div><div class="line">#&gt;  1 Sense &amp; Sensibility   rival</div><div class="line">#&gt;  2 Sense &amp; Sensibility   rival</div><div class="line">#&gt;  3   Pride &amp; Prejudice   rival</div><div class="line">#&gt;  4   Pride &amp; Prejudice  _near_</div><div class="line">#&gt;  5   Pride &amp; Prejudice  _near_</div><div class="line">#&gt;  6 Sense &amp; Sensibility growing</div><div class="line">#&gt;  7 Sense &amp; Sensibility growing</div><div class="line">#&gt;  8 Sense &amp; Sensibility growing</div><div class="line">#&gt;  9 Sense &amp; Sensibility growing</div><div class="line">#&gt; 10 Sense &amp; Sensibility growing</div><div class="line">#&gt; # ... with 73,566 more rows</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(austen_2_books)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#&gt; # A tibble: 30 x 4</div><div class="line">#&gt;                   book      word     n    n2</div><div class="line">#&gt;                 &lt;fctr&gt;     &lt;chr&gt; &lt;int&gt; &lt;int&gt;</div><div class="line">#&gt;  1 Sense &amp; Sensibility    elinor   623  -623</div><div class="line">#&gt;  2   Pride &amp; Prejudice elizabeth   597   597</div><div class="line">#&gt;  3 Sense &amp; Sensibility  marianne   492  -492</div><div class="line">#&gt;  4   Pride &amp; Prejudice     darcy   373   373</div><div class="line">#&gt;  5   Pride &amp; Prejudice    bennet   294   294</div><div class="line">#&gt;  6   Pride &amp; Prejudice      miss   283   283</div><div class="line">#&gt;  7   Pride &amp; Prejudice      jane   264   264</div><div class="line">#&gt;  8   Pride &amp; Prejudice   bingley   257   257</div><div class="line">#&gt;  9 Sense &amp; Sensibility      time   239  -239</div><div class="line">#&gt; 10 Sense &amp; Sensibility  dashwood   231  -231</div><div class="line">#&gt; # ... with 20 more rows</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">austen_2_books %&gt;% </div><div class="line">  ggplot(aes(x = reorder(word, n2), y = n2, fill = book)) +</div><div class="line">  geom_bar(stat = <span class="string">"identity"</span>) +</div><div class="line">  theme_fivethirtyeight() +</div><div class="line">  theme(panel.background = element_rect(fill = <span class="string">"#FCF0E1"</span>), <span class="comment"># 图片背景填充色为“土黄色”</span></div><div class="line">        plot.background = element_rect(fill = <span class="string">"#FCF0E1"</span>),</div><div class="line">        legend.background = element_blank()) +</div><div class="line">  <span class="comment"># 标题</span></div><div class="line">  labs(title = <span class="string">"Words Frequency Count 2"</span>,</div><div class="line">       subtitle = <span class="string">"Made in 2017-08-25，by Leo Lee"</span>,</div><div class="line">       caption = <span class="string">"Source: janeaustenr package"</span>,</div><div class="line">       xlab = <span class="string">""</span>, ylab = <span class="string">""</span>,</div><div class="line">       fill = <span class="string">""</span>) +</div><div class="line">  scale_fill_manual(values = c(<span class="string">"#F26B68"</span>, <span class="string">"#0991DB"</span>)) +</div><div class="line">  scale_y_continuous(position = <span class="string">"right"</span>) +</div><div class="line">  coord_flip() +</div><div class="line">  geom_text(data = filter(austen_2_books, book == <span class="string">"Sense &amp; Sensibility"</span>), </div><div class="line">            aes(x = , y = , label = n), hjust = <span class="number">1.5</span>) +</div><div class="line">  geom_text(data = filter(austen_2_books, book != <span class="string">"Sense &amp; Sensibility"</span>), </div><div class="line">            aes(x = , y = , label = n), hjust = -<span class="number">0.5</span>)</div></pre></td></tr></table></figure>
<p><img src="http://guangzheng.site/shiny-examples-master/blog_images/barplots1.png" alt="barplot2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习的时候看完了一本讲解&lt;code&gt;ggplot2&lt;/code&gt;包的书，名字叫做《Guide to CreateBeautiful Graphics in R》。&lt;br&gt;老实说，这本书虽然有很多例子，但讲的很浅，也许这本书的定位就是参考手册吧。^&lt;em&gt;^…看完了里面柱状图的内容，感觉配色不是很美观。&lt;br&gt;于是乎自己动手绘制了以下的两幅柱状图，其中配色方案来自&lt;a href=&quot;https://pudding.cool/2017/08/the-office/&quot;&gt;The Pudding&lt;/a&gt;。感觉这个博客&lt;br&gt;图像的配色方案让人赏心悦目，自己就仿照着也画一画^&lt;/em&gt;^…&lt;/p&gt;
    
    </summary>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="ggplot2" scheme="http://yoursite.com/tags/ggplot2/"/>
    
  </entry>
  
  <entry>
    <title>R语言解决矩阵距离的问题</title>
    <link href="http://yoursite.com/2017/06/16/R%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E7%9F%A9%E9%98%B5%E8%B7%9D%E7%A6%BB%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/16/R语言解决矩阵距离的问题/</id>
    <published>2017-06-16T11:38:07.410Z</published>
    <updated>2017-06-16T11:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚群里有人提问，“请教个问题，有两个矩阵A和B，A矩阵n行2列，2列分别代表经度和纬度，B矩阵相同（行数不同，A有1万行，B有350万行），需要找出B矩阵中每一行数据，在A矩阵中距离最近的行号，该采用什么方法。”</p>
<p>乍一看，如果矩阵A和矩阵B是同型矩阵的话，那么可以直接对矩阵A和矩阵B做减法，然后再计算距离。但是，在A和B非同型矩阵的情况下。貌似只能用循环的方式解决了。当然，用<code>lapply()</code>等泛函应该也可以。我想到一种解法，不过十分繁琐，而且用到了<strong>最不推荐</strong>的循环方式。鉴于目前没有想到什么更好的办法，姑且把目前的想法记下来。</p>
<p>由于提问者给的矩阵维度过大，算完估计黄花菜都凉了。所以我把数据维度缩小几个数量级，以下是代码。</p>
<a id="more"></a> 
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成数据</span></div><div class="line">set.seed(<span class="number">12</span>)</div><div class="line">A &lt;- matrix(rnorm(<span class="number">1e3</span>), ncol = <span class="number">2</span>)</div><div class="line">B &lt;- matrix(runif(<span class="number">1e2</span>, <span class="number">2</span>, <span class="number">6</span>), ncol = <span class="number">2</span>)</div><div class="line"></div><div class="line">dfA &lt;- as.data.frame(A)</div><div class="line">dfB &lt;- as.data.frame(B)</div><div class="line">head(dfA)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#&gt;           V1          V2</div><div class="line">#&gt; 1 -1.4805676 -1.54930140</div><div class="line">#&gt; 2  1.5771695  0.87145355</div><div class="line">#&gt; 3 -0.9567445  0.04878753</div><div class="line">#&gt; 4 -0.9200052  0.17027381</div><div class="line">#&gt; 5 -1.9976421  0.07466159</div><div class="line">#&gt; 6 -0.2722960  0.28756053</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">head(dfB)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#&gt;         V1       V2</div><div class="line">#&gt; 1 2.023439 4.884397</div><div class="line">#&gt; 2 5.519670 3.213451</div><div class="line">#&gt; 3 4.788179 5.259515</div><div class="line">#&gt; 4 4.394472 4.067191</div><div class="line">#&gt; 5 5.772587 5.793892</div><div class="line">#&gt; 6 2.257782 2.378813</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 计算矩阵A每一行到矩阵B每一行的距离</span></div><div class="line">distance &lt;- c()</div><div class="line">nm &lt;- c()</div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:nrow(dfA)) <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>:nrow(dfB)) &#123;</div><div class="line">  distance &lt;- c(sqrt((dfA[[<span class="number">1</span>]][i] - dfB[[<span class="number">1</span>]][j]) ^ <span class="number">2</span> + </div><div class="line">                        (dfA[[<span class="number">2</span>]][i] - dfB[[<span class="number">2</span>]][j]) ^ <span class="number">2</span>), distance)</div><div class="line">  nm &lt;- c(nm, paste(<span class="string">"A"</span>, i, <span class="string">"B"</span>, j, sep = <span class="string">"-"</span>))</div><div class="line">&#125;</div><div class="line">names(distance) &lt;- nm</div><div class="line">head(distance)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#&gt;  A-1-B-1  A-1-B-2  A-1-B-3  A-1-B-4  A-1-B-5  A-1-B-6 </div><div class="line">#&gt; 5.092386 6.108986 6.713148 7.358928 3.383767 6.072581</div></pre></td></tr></table></figure>
<p>上面的代码运行效率其实是很低的，因为每经过一轮迭代，R就要为<code>distance</code>和<code>nm</code>两个向量重新分配内存。这里为什么不用<code>distance &lt;- numeric(nrow(dfA) * nrow(dfB))</code>这种循环呢？可以看到,<code>distance</code>的长度是矩阵A和矩阵B行数的积，但是在<code>for</code>循环中，索引向量只有<code>i</code>和<code>j</code>，<code>i</code>和<code>j</code>均小于<code>distance</code>的长度。这就导致了循环无法继续。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(dplyr)</div><div class="line"><span class="keyword">library</span>(tidyr)</div><div class="line">dist_df &lt;- data.frame(nm = names(distance), dst = unname(distance))</div><div class="line">dist_df %&gt;%</div><div class="line">  separate(nm, into = c(<span class="string">"matA"</span>, <span class="string">"rowA"</span>, <span class="string">"matB"</span>, <span class="string">"rowB"</span>),</div><div class="line">           sep = <span class="string">"-"</span>) %&gt;%</div><div class="line">  group_by(rowA) %&gt;%</div><div class="line">  mutate(min_dist = min(dst),</div><div class="line">         diff_dist = dst - min_dist) %&gt;%</div><div class="line">  <span class="comment"># print(n = 150)</span></div><div class="line">  filter(diff_dist == <span class="number">0</span>) %&gt;%</div><div class="line">  select(<span class="number">1</span>:<span class="number">4</span>) %&gt;%</div><div class="line">  print(n = <span class="number">20</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#&gt; # A tibble: 500 x 4</div><div class="line">#&gt; # Groups:   rowA [500]</div><div class="line">#&gt;     matA  rowA  matB  rowB</div><div class="line">#&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;</div><div class="line">#&gt;  1     A     1     B     5</div><div class="line">#&gt;  2     A     2     B     5</div><div class="line">#&gt;  3     A     3     B     5</div><div class="line">#&gt;  4     A     4     B     5</div><div class="line">#&gt;  5     A     5     B     5</div><div class="line">#&gt;  6     A     6     B     5</div><div class="line">#&gt;  7     A     7     B     5</div><div class="line">#&gt;  8     A     8     B     5</div><div class="line">#&gt;  9     A     9     B     5</div><div class="line">#&gt; 10     A    10     B     5</div><div class="line">#&gt; 11     A    11     B     5</div><div class="line">#&gt; 12     A    12     B     5</div><div class="line">#&gt; 13     A    13     B     5</div><div class="line">#&gt; 14     A    14     B     5</div><div class="line">#&gt; 15     A    15     B     5</div><div class="line">#&gt; 16     A    16     B     5</div><div class="line">#&gt; 17     A    17     B     5</div><div class="line">#&gt; 18     A    18     B     5</div><div class="line">#&gt; 19     A    19     B     5</div><div class="line">#&gt; 20     A    20     B     5</div><div class="line">#&gt; # ... with 480 more rows</div></pre></td></tr></table></figure>
<p>解决上面的问题，一共写了接近30行的代码。可以说已经是很繁琐了。但现在想想也就这一个办法(⊙o⊙)…。如果以后再想到其他的更简单的做法，再重写一篇博客。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚群里有人提问，“请教个问题，有两个矩阵A和B，A矩阵n行2列，2列分别代表经度和纬度，B矩阵相同（行数不同，A有1万行，B有350万行），需要找出B矩阵中每一行数据，在A矩阵中距离最近的行号，该采用什么方法。”&lt;/p&gt;
&lt;p&gt;乍一看，如果矩阵A和矩阵B是同型矩阵的话，那么可以直接对矩阵A和矩阵B做减法，然后再计算距离。但是，在A和B非同型矩阵的情况下。貌似只能用循环的方式解决了。当然，用&lt;code&gt;lapply()&lt;/code&gt;等泛函应该也可以。我想到一种解法，不过十分繁琐，而且用到了&lt;strong&gt;最不推荐&lt;/strong&gt;的循环方式。鉴于目前没有想到什么更好的办法，姑且把目前的想法记下来。&lt;/p&gt;
&lt;p&gt;由于提问者给的矩阵维度过大，算完估计黄花菜都凉了。所以我把数据维度缩小几个数量级，以下是代码。&lt;/p&gt;
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/categories/R/"/>
    
      <category term="tricks" scheme="http://yoursite.com/categories/R/tricks/"/>
    
    
  </entry>
  
  <entry>
    <title>R语言解决张三，李四王五说谎的问题</title>
    <link href="http://yoursite.com/2017/06/11/R%E8%AF%AD%E8%A8%80%E8%A7%A3%E5%86%B3%E5%BC%A0%E4%B8%89%EF%BC%8C%E6%9D%8E%E5%9B%9B%E7%8E%8B%E4%BA%94%E8%AF%B4%E8%B0%8E%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/11/R语言解决张三，李四王五说谎的问题/</id>
    <published>2017-06-11T13:50:11.580Z</published>
    <updated>2017-06-11T14:13:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到一个问题，<a href="https://www.zhihu.com/question/60666826/answer/182130361?utm_source=qq&amp;utm_medium=social" target="_blank" rel="external">张三说李四在说谎，李四说王五在说谎，王五说张三李四都在说谎。问谁在说谎。用R语言解决。</a>。不得不说，这个问题还是挺有趣的。但是拿到这个问题，我是不知道该怎么办的。不过有大神<a href="https://www.zhihu.com/people/ashther" target="_blank" rel="external">孙利军</a>给出了答案。如下：</p>
<p>张三、李四和王五，有三个人，每个人均有“说谎”，“说真话”两种可能，故一共有$2^3=8$中可能。这里，通过<code>expand.grid()</code>函数创建一个数据框，包含所有的组合。</p>
<a id="more"></a>  
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(df &lt;- expand.grid(zhang = <span class="number">0</span>:<span class="number">1</span>, li = <span class="number">0</span>:<span class="number">1</span>, wang = <span class="number">0</span>:<span class="number">1</span>))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">##   zhang li wang</div><div class="line">## 1     0  0    0</div><div class="line">## 2     1  0    0</div><div class="line">## 3     0  1    0</div><div class="line">## 4     1  1    0</div><div class="line">## 5     0  0    1</div><div class="line">## 6     1  0    1</div><div class="line">## 7     0  1    1</div><div class="line">## 8     1  1    1</div></pre></td></tr></table></figure>
<p>其中，0代表撒谎，1代表诚实，每一行是一种组合，组合要满足题目中所说的逻辑关系，也就是说：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">zhang == !li </div><div class="line">li == !wang</div><div class="line">wang == (!zhang &amp; !li)</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apply(df, <span class="number">1</span>, <span class="keyword">function</span>(x) &#123;</div><div class="line">  all(</div><div class="line">    x[<span class="string">'zhang'</span>] == !x[<span class="string">'li'</span>], </div><div class="line">    x[<span class="string">'li'</span>] == !x[<span class="string">'wang'</span>], </div><div class="line">    x[<span class="string">'wang'</span>] == (!x[<span class="string">'zhang'</span>] &amp; !x[<span class="string">'li'</span>])</div><div class="line">  )</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE</div></pre></td></tr></table></figure>
<p>可以看到，第3行结果为<code>TRUE</code>，说明第3中组合是符合条件的。因此，答案为张三说谎，王五说谎，李四说真话。</p>
<p>知乎原题传送门：<a href="https://www.zhihu.com/question/60666826/answer/182130361" target="_blank" rel="external">R语言解决张三李四王五说谎问题？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在知乎上看到一个问题，&lt;a href=&quot;https://www.zhihu.com/question/60666826/answer/182130361?utm_source=qq&amp;amp;utm_medium=social&quot;&gt;张三说李四在说谎，李四说王五在说谎，王五说张三李四都在说谎。问谁在说谎。用R语言解决。&lt;/a&gt;。不得不说，这个问题还是挺有趣的。但是拿到这个问题，我是不知道该怎么办的。不过有大神&lt;a href=&quot;https://www.zhihu.com/people/ashther&quot;&gt;孙利军&lt;/a&gt;给出了答案。如下：&lt;/p&gt;
&lt;p&gt;张三、李四和王五，有三个人，每个人均有“说谎”，“说真话”两种可能，故一共有$2^3=8$中可能。这里，通过&lt;code&gt;expand.grid()&lt;/code&gt;函数创建一个数据框，包含所有的组合。&lt;/p&gt;
    
    </summary>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="tricks" scheme="http://yoursite.com/tags/tricks/"/>
    
  </entry>
  
  <entry>
    <title>如何查找数据框中重复的数据</title>
    <link href="http://yoursite.com/2017/06/08/%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E6%A1%86%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2017/06/08/如何查找数据框中重复的数据/</id>
    <published>2017-06-08T02:17:52.190Z</published>
    <updated>2017-06-08T02:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天看到群里面有童鞋问了一个问题：如何查找数据框中的重复值？这个问题问的非常好，而且很有趣。查找重复值一般大家都会想到<code>unique()</code>函数，<code>distinct()</code>函数，<code>duplicated()</code>函数等等。但是这些函数一般只能找出每组重复数据中的一个，并不能指出哪些数据是重复的。怎么办？有个童鞋给出了一个非常有创意的解决方案。下面来看看代码：</p>
<a id="more"></a>  
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 模拟的数据框</span></div><div class="line">dat &lt;- data.frame(</div><div class="line">  id1 = c(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>),</div><div class="line">  id2 = c(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>),</div><div class="line">  id3 = c(<span class="number">4</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span>)</div><div class="line">)</div><div class="line">dat</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#&gt;   id1 id2 id3</div><div class="line">#&gt; 1   1   2   4</div><div class="line">#&gt; 2   1   2   4</div><div class="line">#&gt; 3   1   3   6</div><div class="line">#&gt; 4   2   2   7</div><div class="line">#&gt; 5   2   2   7</div><div class="line">#&gt; 6   1   2   9</div></pre></td></tr></table></figure>
<p>可以看到，数据框中的第1，第2行是完全相同的，第4，第5行也是完全相同的。数据框小肉眼可以一眼看出来，但是一旦数据框有成千上万行，估计眼睛看瞎了也看出来，^_^。下面我们的任务就找出第1,2,4,5行数据。</p>
<p>该童鞋给出的解决方案是这样的:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(dplyr)</div><div class="line">dat %&gt;% </div><div class="line">  <span class="comment"># 下面这一步非常巧妙，将每一列进行分组</span></div><div class="line">  <span class="comment"># 很显然，分完组后，很容易求出哪些组有出现不止一次</span></div><div class="line">  group_by(id1, id2, id3) %&gt;%  </div><div class="line">  <span class="comment"># 注意：这里是mutate(index = n())，不是summarize(index = n())</span></div><div class="line">  mutate(index = n()) %&gt;%</div><div class="line">  <span class="comment"># 选择那些出现不止一次的组</span></div><div class="line">  filter(index &gt; <span class="number">1</span>) %&gt;%</div><div class="line">  <span class="comment"># 选择1前3列</span></div><div class="line">  select(<span class="number">1</span>:<span class="number">3</span>) %&gt;%</div><div class="line">  <span class="comment"># 去掉分组属性</span></div><div class="line">  ungroup()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#&gt; # A tibble: 4 x 3</div><div class="line">#&gt;     id1   id2   id3</div><div class="line">#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</div><div class="line">#&gt; 1     1     2     4</div><div class="line">#&gt; 2     1     2     4</div><div class="line">#&gt; 3     2     2     7</div><div class="line">#&gt; 4     2     2     7</div></pre></td></tr></table></figure>
<p>上面代码中关键的步骤在于对所有的变量进行分组，以及用<code>mutate()</code>而不是<code>summarize()</code>。下面我们来看看为什么要这样做。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dat %&gt;% </div><div class="line">  group_by(id1, id2, id3) %&gt;%  </div><div class="line">  mutate(index = n())</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#&gt; Source: local data frame [6 x 4]</div><div class="line">#&gt; Groups: id1, id2, id3 [4]</div><div class="line">#&gt; </div><div class="line">#&gt; # A tibble: 6 x 4</div><div class="line">#&gt;     id1   id2   id3 index</div><div class="line">#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;</div><div class="line">#&gt; 1     1     2     4     2</div><div class="line">#&gt; 2     1     2     4     2</div><div class="line">#&gt; 3     1     3     6     1</div><div class="line">#&gt; 4     2     2     7     2</div><div class="line">#&gt; 5     2     2     7     2</div><div class="line">#&gt; 6     1     2     9     1</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dat %&gt;% </div><div class="line">  group_by(id1, id2, id3) %&gt;%  </div><div class="line">  summarize(index = n())</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#&gt; Source: local data frame [4 x 4]</div><div class="line">#&gt; Groups: id1, id2 [?]</div><div class="line">#&gt; </div><div class="line">#&gt; # A tibble: 4 x 4</div><div class="line">#&gt;     id1   id2   id3 index</div><div class="line">#&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;</div><div class="line">#&gt; 1     1     2     4     2</div><div class="line">#&gt; 2     1     2     9     1</div><div class="line">#&gt; 3     1     3     6     1</div><div class="line">#&gt; 4     2     2     7     2</div></pre></td></tr></table></figure>
<p>看到两者的结果，豁然开朗了吧。原来<strong>聚合函数</strong>也能这么用！！</p>
<p>上面的解法非常巧妙，我自己是没有想到这么做的。我也给出了一种解决方案，只不过既没有上面代码的优雅，运行效率可能也不如上面的代码。</p>
<p>我的代码如下：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">duplicated(dat)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] FALSE  TRUE FALSE FALSE  TRUE FALSE</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dup_dat &lt;- dat[duplicated(dat), ]</div><div class="line">dup_dat</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#&gt;   id1 id2 id3</div><div class="line">#&gt; 2   1   2   4</div><div class="line">#&gt; 5   2   2   7</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">n_dat &lt;- nrow(dat)</div><div class="line">n_dup &lt;- nrow(dup_dat)</div><div class="line">index &lt;- integer(nrow(dat))</div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:n_dat) <span class="keyword">for</span> (j <span class="keyword">in</span> <span class="number">1</span>:n_dup) &#123;</div><div class="line">  <span class="keyword">if</span> (all(dat[i, ] == dup_dat[j, ]))</div><div class="line">    index[i] &lt;- i</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 1 2 0 4 5 0</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dat[index != <span class="number">0</span>, ]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#&gt;   id1 id2 id3</div><div class="line">#&gt; 1   1   2   4</div><div class="line">#&gt; 2   1   2   4</div><div class="line">#&gt; 4   2   2   7</div><div class="line">#&gt; 5   2   2   7</div></pre></td></tr></table></figure>
<p>相比较而言，我的代码就要繁琐多了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到群里面有童鞋问了一个问题：如何查找数据框中的重复值？这个问题问的非常好，而且很有趣。查找重复值一般大家都会想到&lt;code&gt;unique()&lt;/code&gt;函数，&lt;code&gt;distinct()&lt;/code&gt;函数，&lt;code&gt;duplicated()&lt;/code&gt;函数等等。但是这些函数一般只能找出每组重复数据中的一个，并不能指出哪些数据是重复的。怎么办？有个童鞋给出了一个非常有创意的解决方案。下面来看看代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="dplyr" scheme="http://yoursite.com/tags/dplyr/"/>
    
  </entry>
  
  <entry>
    <title>R语言蒙特卡罗模拟计算圆周率</title>
    <link href="http://yoursite.com/2017/06/06/R%E8%AF%AD%E8%A8%80%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E6%A8%A1%E6%8B%9F%E8%AE%A1%E7%AE%97%E5%9C%86%E5%91%A8%E7%8E%87/"/>
    <id>http://yoursite.com/2017/06/06/R语言蒙特卡罗模拟计算圆周率/</id>
    <published>2017-06-05T16:49:19.950Z</published>
    <updated>2017-06-05T16:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>蒙特卡罗方法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。将所求解的问题同一定的概率模型相联系，用电子计算机实现统计模拟或抽样，以获得问题的近似解。为象征性地表明这一方法的概率统计特征，故借用赌城蒙特卡罗命名。^[<a href="http://wiki.mbalib.com/wiki/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E6%96%B9%E6%B3%95" target="_blank" rel="external">蒙特卡罗方法</a>]</p>
<a id="more"></a>  
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># x和y构成了一个正方形</span></div><div class="line"><span class="comment"># (x, y)表示落在边长为1的正方形的点</span></div><div class="line">x &lt;- runif(<span class="number">10000</span>)</div><div class="line">y &lt;- runif(<span class="number">10000</span>)</div><div class="line">z &lt;- x^<span class="number">2</span> + y^<span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment"># sum(z &lt;= 1)统计落在单位圆内的点数</span></div><div class="line"><span class="comment"># 由于我们只统计了第一象限的点，但是根据对称性，点落在每个象限的概率是相等的</span></div><div class="line"><span class="comment"># 故下面的式子要乘以4</span></div><div class="line">sum(z &lt;= <span class="number">1</span>) / <span class="number">10000</span> * <span class="number">4</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 3.1472</div></pre></td></tr></table></figure>
<p>可视化</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span>(plotrix)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; Loading required package: plotrix</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span>(grid)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; Loading required package: grid</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">simp &lt;- <span class="keyword">function</span>(n)&#123;</div><div class="line">  x &lt;- runif(n)</div><div class="line">  y &lt;- runif(n)</div><div class="line">  xy &lt;- x^<span class="number">2</span> + y^<span class="number">2</span></div><div class="line">  ind &lt;- xy &lt;=<span class="number">1</span></div><div class="line">  up &lt;- sum(xy &lt;= <span class="number">1</span>)</div><div class="line">  pai &lt;- up / n * <span class="number">4</span></div><div class="line">  </div><div class="line">  <span class="comment"># 绘图</span></div><div class="line">  plot(c(<span class="number">0</span>, <span class="number">1</span>), c(<span class="number">0</span>, <span class="number">1</span>), type = <span class="string">'n'</span>, asp = <span class="number">1</span>, </div><div class="line">       main = bquote(pi == .(pai)), xlab=<span class="string">""</span>,ylab=<span class="string">""</span>)</div><div class="line">  rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>)</div><div class="line">  draw.circle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</div><div class="line">  points(x, y, pch = <span class="number">20</span>, cex = <span class="number">0.5</span>,</div><div class="line">         col = ind+<span class="number">1</span>)</div><div class="line">&#125;</div><div class="line">simp(<span class="number">50000</span>)</div></pre></td></tr></table></figure>
<p><img src="https://github.com/Leo-Lee15/leo-lee15.github.io/blob/master/images/monte1.png" alt=""></p>
<p>上面的代码来自豆瓣<a href="https://www.douban.com/note/471471288/" target="_blank" rel="external">pi的R语言模拟</a>，有所修改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蒙特卡罗方法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。将所求解的问题同一定的概率模型相联系，用电子计算机实现统计模拟或抽样，以获得问题的近似解。为象征性地表明这一方法的概率统计特征，故借用赌城蒙特卡罗命名。^[&lt;a href=&quot;http://wiki.mbalib.com/wiki/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97%E6%96%B9%E6%B3%95&quot;&gt;蒙特卡罗方法&lt;/a&gt;]&lt;/p&gt;
    
    </summary>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="蒙特卡罗" scheme="http://yoursite.com/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E7%BD%97/"/>
    
  </entry>
  
  <entry>
    <title>关于R语言`if...else...return`的一点思考</title>
    <link href="http://yoursite.com/2017/06/05/%E5%85%B3%E4%BA%8ER%E8%AF%AD%E8%A8%80%60if...else%60%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/06/05/关于R语言`if...else`的一点思考/</id>
    <published>2017-06-05T11:05:38.520Z</published>
    <updated>2017-06-05T16:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来对于<code>return()</code>函数很困惑。在代码到低是写一个<code>return()</code>比较好，还是写多个<code>return</code>比较好呢？纠结的很。今天偶然间在网上看到一个问题：<a href="https://segmentfault.com/q/1010000002546217" target="_blank" rel="external">一个函数里面用一个return 好 还是多个return 好？</a>，感觉有点明白了。在上一篇博客解析<code>fivenum</code>函数的源码中，<code>fivenum</code>函数也多次“用到”<code>return</code>，当然只是隐式的调用<code>return</code>函数。那么问题来了？我到底该用哪一种呢？？？</p>
<p>我自己写了一个函数，然后用<code>microbenchmark</code>包输出两个函数（各执行10000次）的执行时间，比较哪个更好，以后就用哪个了。^_^</p>
<a id="more"></a>  
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">ff1 &lt;- <span class="keyword">function</span>(x, y) &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">    <span class="keyword">return</span>(x + y) </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (x == y) &#123;</div><div class="line">    <span class="keyword">return</span>(x - y)</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">    <span class="keyword">return</span>(x * y)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ff2 &lt;- <span class="keyword">function</span>(x, y) &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">    z &lt;- x + y</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (x == y) &#123;</div><div class="line">    z &lt;- x - y</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">    z &lt;- x * y</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>(z)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ff1(<span class="number">10</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 40</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ff2(<span class="number">10</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 40</div></pre></td></tr></table></figure>
<p>载入<code>microbenchmark</code>包</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(microbenchmark)</div><div class="line">microbenchmark(ff1(<span class="number">10</span>, <span class="number">4</span>), ff2(<span class="number">10</span>, <span class="number">4</span>), </div><div class="line">               times = <span class="number">10000</span>,  <span class="comment"># 执行10000次</span></div><div class="line">               unit = <span class="string">"ns"</span>)    <span class="comment"># 时间为纳秒</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#&gt; Unit: nanoseconds</div><div class="line">#&gt;        expr min  lq     mean median  uq     max neval cld</div><div class="line">#&gt;  ff1(10, 4)   0 446 1428.514    447 892 7953122 10000   a</div><div class="line">#&gt;  ff2(10, 4)   0 446 1643.996    447 893 9130717 10000   a</div></pre></td></tr></table></figure>
<blockquote>
<p>结论：两个函数在执行速度上并没有太大的差别。但是就简洁性而言，第一种多个<code>return()</code>更好。</p>
</blockquote>
<p>下面来再来看看<code>if...else</code>语句的例子</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">fg1 &lt;- <span class="keyword">function</span>(x, y) &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">    <span class="keyword">return</span>(x * y)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>(x + y)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fg2 &lt;- <span class="keyword">function</span>(x, y) &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">    <span class="keyword">return</span>(x * y)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">   <span class="keyword">return</span>(x + y) </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fg1(<span class="number">3</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 15</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fg1(<span class="number">10</span>, <span class="number">8</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 18</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fg2(<span class="number">3</span>, <span class="number">5</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 15</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fg2(<span class="number">10</span>, <span class="number">8</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] 18</div></pre></td></tr></table></figure>
<p>下面看看这两个函数的性能差异</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(microbenchmark)</div><div class="line">microbenchmark(fg1(<span class="number">10</span>, <span class="number">4</span>), fg2(<span class="number">10</span>, <span class="number">4</span>),</div><div class="line">               times = <span class="number">10000</span>, </div><div class="line">               unit = <span class="string">"ns"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#&gt; Unit: nanoseconds</div><div class="line">#&gt;        expr min lq     mean median  uq   max neval cld</div><div class="line">#&gt;  fg1(10, 4)   0  0 349.8470    446 447 23651 10000   a</div><div class="line">#&gt;  fg2(10, 4)   0  0 349.3135    446 447 25881 10000   a</div></pre></td></tr></table></figure>
<blockquote>
<p>结论：上面的两个函数性能差异也不是太大。但是就就简洁性而言，没有<code>else</code>的版本更好。其实，这里的<code>else</code>根本就是多余的。因为一旦<code>if</code>条件的结果为真，程序会直接返回<code>return()</code>中的值。后面的代码不回被执行。只不过加了<code>else</code>代码更加清晰一些。</p>
</blockquote>
<p>当然，下面的这种情况加<code>else</code>更好。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">f1 &lt;- <span class="keyword">function</span>(x, y) &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">    z &lt;- x - y</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (x == y) &#123;</div><div class="line">    z &lt;- x + y</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">    z &lt;- x * y</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>(z)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">f2 &lt;- <span class="keyword">function</span>(x, y) &#123;</div><div class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</div><div class="line">    z &lt;- x - y</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == y) &#123;</div><div class="line">    z &lt;- x + y</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; y) &#123;</div><div class="line">    z &lt;- x * y</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>(z)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f1(<span class="number">3</span>, <span class="number">6</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] -3</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f2(<span class="number">3</span>, <span class="number">6</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] -3</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(microbenchmark)</div><div class="line">microbenchmark(f1(<span class="number">3</span>, <span class="number">6</span>), f2(<span class="number">3</span>, <span class="number">6</span>),</div><div class="line">               times = <span class="number">10000</span>,</div><div class="line">               unit = <span class="string">"ns"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#&gt; Unit: nanoseconds</div><div class="line">#&gt;      expr min  lq    mean median  uq     max neval cld</div><div class="line">#&gt;  f1(3, 6)   0 446 1440.03    447 447 9028085 10000   a</div><div class="line">#&gt;  f2(3, 6)   0 446 1212.27    446 447 7865215 10000   a</div></pre></td></tr></table></figure>
<blockquote>
<p>结论：下面的加<code>else</code>的函数明显快于上面的没有加<code>else</code>的函数。</p>
</blockquote>
<p>这是因为这里的判定条件为<code>3 &lt; 6</code>，显然这个为真，但是第一个会接着执行下面的判断函数，直到把所有的判定条件全部执行完毕为止。最终返回为真的结果。但是第二个函数就不一样了，因为后面出现了<code>else</code>语句，编译器一看到这个<code>else</code>，就知道后面的都不用执行了。所以第二个函数要快一些。</p>
<p>写到这里，心里终于有数了。在函数中，就用多个<code>return</code>吧，当然退而求其次，也可以选择<code>if...else...return</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来对于&lt;code&gt;return()&lt;/code&gt;函数很困惑。在代码到低是写一个&lt;code&gt;return()&lt;/code&gt;比较好，还是写多个&lt;code&gt;return&lt;/code&gt;比较好呢？纠结的很。今天偶然间在网上看到一个问题：&lt;a href=&quot;https://segmentfault.com/q/1010000002546217&quot;&gt;一个函数里面用一个return 好 还是多个return 好？&lt;/a&gt;，感觉有点明白了。在上一篇博客解析&lt;code&gt;fivenum&lt;/code&gt;函数的源码中，&lt;code&gt;fivenum&lt;/code&gt;函数也多次“用到”&lt;code&gt;return&lt;/code&gt;，当然只是隐式的调用&lt;code&gt;return&lt;/code&gt;函数。那么问题来了？我到底该用哪一种呢？？？&lt;/p&gt;
&lt;p&gt;我自己写了一个函数，然后用&lt;code&gt;microbenchmark&lt;/code&gt;包输出两个函数（各执行10000次）的执行时间，比较哪个更好，以后就用哪个了。^_^&lt;/p&gt;
    
    </summary>
    
      <category term="R编程风格" scheme="http://yoursite.com/categories/R%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"/>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="if...else" scheme="http://yoursite.com/tags/if-else/"/>
    
      <category term="return" scheme="http://yoursite.com/tags/return/"/>
    
      <category term="microbenchmark" scheme="http://yoursite.com/tags/microbenchmark/"/>
    
  </entry>
  
  <entry>
    <title>R函数源码解析（一）-- fivenum函数</title>
    <link href="http://yoursite.com/2017/06/05/R%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E2%80%94fivenum%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/06/05/R函数源码解析—fivenum函数/</id>
    <published>2017-06-05T02:34:16.820Z</published>
    <updated>2017-06-05T16:49:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是<strong>R语言中的函数源代码解析</strong>系列的第一篇文章。</p>
<p>本文将逐句解释<code>fivenum</code>函数的源码。之所以选取<code>fivenum</code>函数，是因为这个函数比较简单，结构并不复杂。太复杂我都要看晕了，^_^。以后会解析一些比较复杂的函数源代码，当然以 本人目前的水平，只能解释纯粹的R代码，更深层次的C或者其他的语言的代码，还是够呛。</p>
<p>好了，言归正传。直接进入主题吧…</p>
<a id="more"></a> 
<p>首先看看<code>fivenum</code>函数是干嘛的。以下内容来自帮助文档。</p>
<blockquote>
<p><strong><code>fivenum</code></strong>: Returns Tukey’s five number summary (minimum, lower-hinge, median, upper-hinge, maximum) for the input data.</p>
</blockquote>
<p>上面写的很清楚了，返回Tukey五数统计量。</p>
<p>下面看看<code>fivenum</code>的用法：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># na.rm默认为TRUE</span></div><div class="line">fivenum(x, na.rm = <span class="literal">TRUE</span>)</div></pre></td></tr></table></figure>
<ul>
<li>x: 数值型，可以包含<code>NA</code>和<code>+Inf</code>，<code>-Inf</code></li>
<li>na.rm: 逻辑型，若为真, 在计算之前删去所有的缺失值（NA）和NaN（Not a number）</li>
</ul>
<p>举个例子</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">set.seed(<span class="number">1234</span>)</div><div class="line">fivenum(c(rnorm(<span class="number">100</span>), -<span class="number">1</span>:<span class="number">1</span>/<span class="number">0</span>))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1]       -Inf -0.9111954 -0.3846280  0.5060559        Inf</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fivenum(c(rnorm(<span class="number">20</span>), <span class="literal">NA</span>, <span class="number">10</span>, <span class="literal">NA</span>, <span class="literal">NaN</span>))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1] -1.24428785 -0.50247778  0.02236253  0.35496826 10.00000000</div></pre></td></tr></table></figure>
<p>通过这两个例子，很容弄清楚<code>fivenum</code>的用法。下面正式进入本文的核心部分，逐句解释<code>fivenum</code>函数的源码。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fivenum</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#&gt; function (x, na.rm = TRUE) </div><div class="line">#&gt; &#123;</div><div class="line">#&gt;     xna &lt;- is.na(x)</div><div class="line">#&gt;     if (any(xna)) &#123;</div><div class="line">#&gt;         if (na.rm) </div><div class="line">#&gt;             x &lt;- x[!xna]</div><div class="line">#&gt;         else return(rep.int(NA, 5))</div><div class="line">#&gt;     &#125;</div><div class="line">#&gt;     x &lt;- sort(x)</div><div class="line">#&gt;     n &lt;- length(x)</div><div class="line">#&gt;     if (n == 0) </div><div class="line">#&gt;         rep.int(NA, 5)</div><div class="line">#&gt;     else &#123;</div><div class="line">#&gt;         n4 &lt;- floor((n + 3)/2)/2</div><div class="line">#&gt;         d &lt;- c(1, n4, (n + 1)/2, n + 1 - n4, n)</div><div class="line">#&gt;         0.5 * (x[floor(d)] + x[ceiling(d)])</div><div class="line">#&gt;     &#125;</div><div class="line">#&gt; &#125;</div><div class="line">#&gt; &lt;bytecode: 0x0000000017225fc8&gt;</div><div class="line">#&gt; &lt;environment: namespace:stats&gt;</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">five_nums &lt;- <span class="keyword">function</span>(x, na.rm = <span class="literal">FALSE</span>) &#123;</div><div class="line">  <span class="comment"># 判断x中是否存在缺失值，xna为一个布尔值向量</span></div><div class="line">  xna &lt;- is.na(x)</div><div class="line">  <span class="comment"># 判断x中是否存在缺失值，any(xna)为一个长度为1的布尔值向量，即TRUE或者FALSE</span></div><div class="line">  <span class="keyword">if</span> (any(xna)) &#123;</div><div class="line">    <span class="comment"># 如果na.rm = TRUE，执行x &lt;- x[!xna]</span></div><div class="line">    <span class="keyword">if</span> (na.rm)</div><div class="line">      <span class="comment"># 删去向量x中的缺失值</span></div><div class="line">      x &lt;- x[!xna]</div><div class="line">    <span class="keyword">else</span></div><div class="line">      <span class="comment"># 如果na.rm = FALSE，返回NA, NA, NA, NA, NA</span></div><div class="line">      <span class="keyword">return</span>(rep.int(<span class="literal">NA</span>, <span class="number">5</span>))</div><div class="line">  &#125;</div><div class="line">  <span class="comment"># 上面的代码中包含return()，表明：</span></div><div class="line">  <span class="comment"># 如果na.rm = FALSE, 则返回rep.int(NA, 5)，</span></div><div class="line">  <span class="comment"># 下面的代码将不会被执行，这与if ... else ...结构有些类似</span></div><div class="line">  </div><div class="line">  <span class="comment"># 我猜测，如果代码中提前出现了return()函数，那么如果执行</span></div><div class="line">  <span class="comment"># 这一语句的条件为真，那么将返回return()返回的值，后面的</span></div><div class="line">  <span class="comment"># 代码将不会被执行</span></div><div class="line">  <span class="comment"># 如果前面的条件为假，那么将执行后面的代码</span></div><div class="line">  </div><div class="line">  <span class="comment"># 对x进行排序，返回排序后的x</span></div><div class="line">  x &lt;- sort(x)</div><div class="line">  <span class="comment"># 求x的长度</span></div><div class="line">  n &lt;- length(x)</div><div class="line">  <span class="comment"># 如果x的长度为0，返回NA, NA, NA, NA, NA</span></div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>)</div><div class="line">    rep.int(<span class="literal">NA</span>, <span class="number">5</span>)</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment"># 如果x的长度不为0，那么执行下面的代码</span></div><div class="line">    <span class="comment"># 下面的代码就是用来计算Tukey五数统计量</span></div><div class="line">    n4 &lt;- floor((n + <span class="number">3</span>) / <span class="number">2</span>) / <span class="number">2</span></div><div class="line">    d &lt;- c(<span class="number">1</span>, n4, (n + <span class="number">1</span>) / <span class="number">2</span>, n + <span class="number">1</span> - n4, n)</div><div class="line">    <span class="number">0.5</span> * (x[floor(d)] + x[ceiling(d)])</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面出现了<code>floor</code>和<code>ceiling</code>两个函数，这里解释一下。这两个函数都是取整函数，<code>floor</code>函数是向下取整，<code>ceiling</code>函数则是向上取整。给个例子吧…</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">floor(c(<span class="number">1.2</span>, <span class="number">3.8</span>, -<span class="number">2.3</span>, -<span class="number">0.7</span>))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1]  1  3 -3 -1</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceiling(c(<span class="number">1.2</span>, <span class="number">3.8</span>, -<span class="number">2.3</span>, -<span class="number">0.7</span>))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&gt; [1]  2  4 -2  0</div></pre></td></tr></table></figure>
<p>之前很少看函数的源代码，现在发现要把R语言学好，学深入，学习R语言里面函数的写法是非常有必要的。很多时候自己不知道该怎么写，如何写出更有效率的函数，这时候看看R中（包括可怕的CRAN库）有没有实现类似功能的函数，这时候写起来就更加顺畅了。当然，推荐新手直接用别人造的轮子，稳定性，效率基本都有保证。至于老手，可以在别人基础上加以改进，或者自己造轮子。哈哈，我就是个新手，在这里大放厥词的谈老手，不要被笑话啊…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是&lt;strong&gt;R语言中的函数源代码解析&lt;/strong&gt;系列的第一篇文章。&lt;/p&gt;
&lt;p&gt;本文将逐句解释&lt;code&gt;fivenum&lt;/code&gt;函数的源码。之所以选取&lt;code&gt;fivenum&lt;/code&gt;函数，是因为这个函数比较简单，结构并不复杂。太复杂我都要看晕了，^_^。以后会解析一些比较复杂的函数源代码，当然以 本人目前的水平，只能解释纯粹的R代码，更深层次的C或者其他的语言的代码，还是够呛。&lt;/p&gt;
&lt;p&gt;好了，言归正传。直接进入主题吧…&lt;/p&gt;
    
    </summary>
    
      <category term="R函数源码解析" scheme="http://yoursite.com/categories/R%E5%87%BD%E6%95%B0%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="fivenum" scheme="http://yoursite.com/tags/fivenum/"/>
    
  </entry>
  
  <entry>
    <title>如何利用Hexo发布Github博客</title>
    <link href="http://yoursite.com/2017/06/02/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E5%8F%91%E5%B8%83Github%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/06/02/如何利用Hexo发布Github博客/</id>
    <published>2017-06-02T12:25:59.800Z</published>
    <updated>2017-06-16T11:40:08.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>搭建个人的博客</li>
</ul>
<p>网上的教程已经不能再多，这里推荐<a href="http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="external">使用hexo+github搭建免费个人博客详细教程</a>。照着做就行了。</p>
<ul>
<li>选择一个markdown编辑器，编写文章，</li>
</ul>
<p>建议使用<code>Rstudio</code>+<code>rmarkdown</code>的形式，并且在<code>yaml</code>栏的<code>output</code>下添加<code>keep_md: TRUE</code>。这样，用<code>knitr</code>编译后，会自动生成一个<code>.md</code>文档。我们只需要修改<code>header</code>部分就可以了。</p>
<ul>
<li>将md文件放在你的hexo网站所在位置下的<code>source\_posts</code>目录，这个目录下存储了很多个<code>md</code>文件，每个文件对应着一篇博客。</li>
</ul>
<a id="more"></a> 
<ul>
<li>打开Git bash，定位Hexo站点目录下，使用<code>hexo generete</code>命令产生静态文件。</li>
</ul>
<blockquote>
<p>在我的电脑上，hexo站点目录为：<code>F:\\myblog\\blog</code></p>
</blockquote>
<ul>
<li><p><code>hexo server</code>，然后到<a href="http://localhost:4000/预览网站效果。或者输入`hexo" target="_blank" rel="external">http://localhost:4000/预览网站效果。或者输入`hexo</a> s –debug`进行本地测试。</p>
</li>
<li><p>将本地博客提交到Github上，在bash命令行输入<code>hexo deploy</code>。</p>
</li>
<li><p>打开个人博客，大功告成！！！</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;搭建个人的博客&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网上的教程已经不能再多，这里推荐&lt;a href=&quot;http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html&quot;&gt;使用hexo+github搭建免费个人博客详细教程&lt;/a&gt;。照着做就行了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择一个markdown编辑器，编写文章，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议使用&lt;code&gt;Rstudio&lt;/code&gt;+&lt;code&gt;rmarkdown&lt;/code&gt;的形式，并且在&lt;code&gt;yaml&lt;/code&gt;栏的&lt;code&gt;output&lt;/code&gt;下添加&lt;code&gt;keep_md: TRUE&lt;/code&gt;。这样，用&lt;code&gt;knitr&lt;/code&gt;编译后，会自动生成一个&lt;code&gt;.md&lt;/code&gt;文档。我们只需要修改&lt;code&gt;header&lt;/code&gt;部分就可以了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将md文件放在你的hexo网站所在位置下的&lt;code&gt;source\_posts&lt;/code&gt;目录，这个目录下存储了很多个&lt;code&gt;md&lt;/code&gt;文件，每个文件对应着一篇博客。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>爬取豆瓣网上关于《大唐荣耀》的讨论帖</title>
    <link href="http://yoursite.com/2017/06/02/%E5%88%A9%E7%94%A8rvest%E5%8C%85%E6%8A%93%E5%8F%96%E3%80%8A%E5%A4%A7%E5%94%90%E8%8D%A3%E8%80%80%E3%80%8B%E8%B1%86%E7%93%A3%E8%AE%A8%E8%AE%BA%E5%B8%96%E5%AD%90/"/>
    <id>http://yoursite.com/2017/06/02/利用rvest包抓取《大唐荣耀》豆瓣讨论帖子/</id>
    <published>2017-06-02T07:51:43.450Z</published>
    <updated>2017-06-02T12:43:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>上半年有两部古装剧火了：《大唐荣耀》（以下简称大唐），《三生三世十里桃花》（以下简称三生）。这两部剧我都看过，^_^。《大唐》个人觉得还是演的不错，但是《三生》就呵呵哒了。当然，《三生》我只是断断续续看了一点，这样评价可能太武断。好吧，那就看看网友是如何评价这两部电视剧的。我在豆瓣上找了二者的评分，发现到目前（2017-06-02）为止，《大唐》的分数是<strong>6.9</strong>，比之前的要低，可能是《大唐2》的口碑不如《大唐1》所造成的。《三生》的分数是<strong>6.4</strong>，这可比之前高多了，有没有水军那就母鸡啦。从分数上来看，《大唐》显然是略胜《三生》的。</p>
<a id="more"></a> 
<p>接下来利用<strong>Hadley</strong>大神开发的<a href="https://cran.r-project.org/web/packages/rvest/index.html" target="_blank" rel="external"><code>rvest</code></a>包，在豆瓣网上抓取网友们对《大唐》的讨论帖。</p>
<h2 id="1-加载包"><a href="#1-加载包" class="headerlink" title="1. 加载包"></a>1. 加载包</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(rvest)</div><div class="line"><span class="keyword">library</span>(stringr)</div><div class="line"><span class="keyword">library</span>(dplyr)</div><div class="line"><span class="keyword">library</span>(progress)</div></pre></td></tr></table></figure>
<h2 id="2-抓取网页的信息"><a href="#2-抓取网页的信息" class="headerlink" title="2. 抓取网页的信息"></a>2. 抓取网页的信息</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">webpage1 &lt;- <span class="string">"https://movie.douban.com/subject/24827545/discussion/?start=0&amp;sort_by=time"</span></div><div class="line">html_session(webpage1)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#&gt; &lt;session&gt; https://movie.douban.com/subject/24827545/discussion/?start=0&amp;sort_by=time</div><div class="line">#&gt;   Status: 200</div><div class="line">#&gt;   Type:   text/html; charset=utf-8</div><div class="line">#&gt;   Size:   29647</div></pre></td></tr></table></figure>
<p>可以看到，网页的编码为utf-8。</p>
<h2 id="3-抓取讨论帖信息"><a href="#3-抓取讨论帖信息" class="headerlink" title="3. 抓取讨论帖信息"></a>3. 抓取讨论帖信息</h2><figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对第2页进行抓取</span></div><div class="line">webs &lt;- <span class="string">"https://movie.douban.com/subject/24827545/discussion/?start=20&amp;sort_by=time"</span></div><div class="line">web_content &lt;- read_html(webs, encoding = <span class="string">"UTF-8"</span>)</div><div class="line"></div><div class="line">titles &lt;- web_content %&gt;%</div><div class="line">  <span class="comment"># 这里css = "td:nth-child(1)"表明帖子名称存在于表格之中，td表示table data(表格的列)</span></div><div class="line">  <span class="comment"># nth-child(1)表示第一列，tr:nth-child(9)表示第9行</span></div><div class="line">  html_nodes(css = <span class="string">"td:nth-child(1)"</span>) %&gt;%</div><div class="line">  html_text() %&gt;%</div><div class="line">  str_replace_all(pattern = <span class="string">"[[:space:]]"</span>, replacement = <span class="string">""</span>)</div><div class="line"></div><div class="line"><span class="comment"># 对所有帖子进行抓取</span></div><div class="line">webSpyder_datang &lt;- <span class="keyword">function</span>(page) &#123;</div><div class="line">  <span class="comment"># 网址</span></div><div class="line">  baseUrl &lt;- <span class="string">"https://movie.douban.com/subject/24827545/discussion/?start="</span></div><div class="line">  web &lt;- str_c(baseUrl, <span class="number">20</span>*(page - <span class="number">1</span>), <span class="string">"&amp;sort_by=time"</span>)</div><div class="line">  </div><div class="line">  <span class="comment"># 抓取贴名</span></div><div class="line">  titles &lt;- web_content %&gt;%</div><div class="line">    html_nodes(css = <span class="string">"td:nth-child(1)"</span>) %&gt;%</div><div class="line">    html_text() %&gt;%</div><div class="line">    str_replace_all(pattern = <span class="string">"[[:space:]]"</span>, replacement = <span class="string">""</span>)</div><div class="line">  titles &lt;- titles[!(titles %<span class="keyword">in</span>% c(<span class="string">"一刻"</span>, <span class="string">"豆瓣摄影"</span>, <span class="string">"最近更新/热门话题"</span>))]</div><div class="line">  </div><div class="line">  <span class="comment"># 抓取发帖人</span></div><div class="line">  authors &lt;- web_content %&gt;%</div><div class="line">    html_nodes(css = <span class="string">"td:nth-child(2)"</span>) %&gt;%</div><div class="line">    html_text() %&gt;%</div><div class="line">    str_replace_all(pattern = <span class="string">"[[:space:]]"</span>, replacement = <span class="string">""</span>)</div><div class="line">  authors &lt;- authors[authors != <span class="string">"作者"</span>]</div><div class="line">  </div><div class="line">  <span class="comment"># 抓取回应数</span></div><div class="line">  responses &lt;- web_content %&gt;%</div><div class="line">    html_nodes(css = <span class="string">"td:nth-child(3)"</span>) %&gt;%</div><div class="line">    html_text() %&gt;%</div><div class="line">    str_replace_all(pattern = <span class="string">"[[:space:]]"</span>, replacement = <span class="string">""</span>)</div><div class="line">  responses &lt;- responses[responses != <span class="string">"回应"</span> ]</div><div class="line">  </div><div class="line">  <span class="comment"># 抓取更新时间</span></div><div class="line">  update_time &lt;- web_content %&gt;%</div><div class="line">    html_nodes(css = <span class="string">"td:nth-child(4)"</span>) %&gt;%</div><div class="line">    html_text()</div><div class="line">  update_time &lt;- update_time[update_time != <span class="string">"更新时间"</span>]</div><div class="line">  </div><div class="line">  data.frame(titles = titles, authors = authors, </div><div class="line">             responses = responses, update_time = update_time,</div><div class="line">             stringsAsFactors = <span class="literal">FALSE</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 循环抓取</span></div><div class="line">pb &lt;- progress_bar$new(</div><div class="line">  format = <span class="string">"  progress [:bar] :percent in :elapsed"</span>,</div><div class="line">  total = <span class="number">21</span>, clear = <span class="literal">FALSE</span>)  <span class="comment"># 加入进度条</span></div><div class="line"></div><div class="line">datang &lt;- vector(mode = <span class="string">"list"</span>, length = <span class="number">21L</span>)</div><div class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> seq_along(datang)) &#123;</div><div class="line">  <span class="keyword">tryCatch</span>(</div><div class="line">    &#123;datang[[i]] &lt;- webSpyder_datang(i)&#125;,</div><div class="line">    error = <span class="keyword">function</span>(e)&#123;cat(<span class="string">"ERROR :"</span>,conditionMessage(e),<span class="string">"\n"</span>)&#125;)</div><div class="line">  pb$tick()</div><div class="line">  Sys.sleep(<span class="number">0.5</span>) <span class="comment"># 增加了Sys.sleep(seconds)函数，让每一步循环都暂停一段时间。</span></div><div class="line">&#125;</div><div class="line">str(datang, max.level = <span class="number">1</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#&gt; List of 21</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div><div class="line">#&gt;  $ :&apos;data.frame&apos;:	20 obs. of  4 variables:</div></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">datang_douban &lt;- purrr::map_df(datang, rbind)</div><div class="line">head(datang_douban, <span class="number">20</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">#&gt;                                                    titles        authors</div><div class="line">#&gt; 1  真不懂这剧也能打7分是怎么打出来的，说这部剧怎么...[图]         夏至未</div><div class="line">#&gt; 2                                               大唐荣耀2         加油站</div><div class="line">#&gt; 3       【剧情讨论】请点进来帮忙解惑一下，防止剧透，标...           观鱼</div><div class="line">#&gt; 4                                  豆瓣之耻，80集的裹脚布       小爱的爸</div><div class="line">#&gt; 5                   [第37集]相怜相念倍相亲,一生一代一双人       宇皇宙帝</div><div class="line">#&gt; 6            [第55集]55集李倓戴上着面具微红的眼睛，好心疼        agean潇</div><div class="line">#&gt; 7                                说是拿去重修，修了什么？           绦生</div><div class="line">#&gt; 8                                              大唐旧版本   情谊丶莫相弃</div><div class="line">#&gt; 9                              说到大唐荣耀你们先想到什么             氵</div><div class="line">#&gt; 10                                   这个剧有90集？？！！         芝加鸽</div><div class="line">#&gt; 11                           这部剧应该叫《打死我也不说》             牙</div><div class="line">#&gt; 12                                   看这部剧就像大便黏连       乱室佳人</div><div class="line">#&gt; 13                                 看了这部剧真心感觉挺好           轮回</div><div class="line">#&gt; 14         老嫌人家是玛丽苏傻白甜，真来个腹黑的，又受不了           狄云</div><div class="line">#&gt; 15                                       广平王眼神里的戏         曲奇饼</div><div class="line">#&gt; 16                       不觉得片头曲和片尾曲都很好听吗？   crystalgazer</div><div class="line">#&gt; 17                                            low瑞又作死          akino</div><div class="line">#&gt; 18                                         [第33集]大boss 或许未来很美丽</div><div class="line">#&gt; 19                                             大唐毒药啊         未央、</div><div class="line">#&gt; 20                             为什么这部剧要叫大唐荣耀？     醉剑踏红尘</div><div class="line">#&gt;    responses      update_time</div><div class="line">#&gt; 1         11 2017-04-04 14:10</div><div class="line">#&gt; 2          1 2017-04-04 12:48</div><div class="line">#&gt; 3          1 2017-04-01 17:14</div><div class="line">#&gt; 4         89 2017-04-01 01:23</div><div class="line">#&gt; 5          7 2017-03-27 11:43</div><div class="line">#&gt; 6          2 2017-03-26 19:43</div><div class="line">#&gt; 7          2 2017-03-26 14:30</div><div class="line">#&gt; 8            2017-03-23 22:44</div><div class="line">#&gt; 9          6 2017-03-23 14:14</div><div class="line">#&gt; 10        34 2017-03-23 11:38</div><div class="line">#&gt; 11        25 2017-03-23 11:07</div><div class="line">#&gt; 12        14 2017-03-23 11:05</div><div class="line">#&gt; 13         2 2017-03-23 10:47</div><div class="line">#&gt; 14        12 2017-03-23 10:37</div><div class="line">#&gt; 15        13 2017-03-23 10:22</div><div class="line">#&gt; 16        16 2017-03-23 10:19</div><div class="line">#&gt; 17        12 2017-03-23 10:15</div><div class="line">#&gt; 18           2017-03-22 22:33</div><div class="line">#&gt; 19           2017-03-21 15:49</div><div class="line">#&gt; 20        28 2017-03-21 10:16</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上半年有两部古装剧火了：《大唐荣耀》（以下简称大唐），《三生三世十里桃花》（以下简称三生）。这两部剧我都看过，^_^。《大唐》个人觉得还是演的不错，但是《三生》就呵呵哒了。当然，《三生》我只是断断续续看了一点，这样评价可能太武断。好吧，那就看看网友是如何评价这两部电视剧的。我在豆瓣上找了二者的评分，发现到目前（2017-06-02）为止，《大唐》的分数是&lt;strong&gt;6.9&lt;/strong&gt;，比之前的要低，可能是《大唐2》的口碑不如《大唐1》所造成的。《三生》的分数是&lt;strong&gt;6.4&lt;/strong&gt;，这可比之前高多了，有没有水军那就母鸡啦。从分数上来看，《大唐》显然是略胜《三生》的。&lt;/p&gt;
    
    </summary>
    
      <category term="R爬虫" scheme="http://yoursite.com/categories/R%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="stringr" scheme="http://yoursite.com/tags/stringr/"/>
    
      <category term="rvest" scheme="http://yoursite.com/tags/rvest/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/04/24/hello-world/"/>
    <id>http://yoursite.com/2017/04/24/hello-world/</id>
    <published>2017-04-24T14:17:44.720Z</published>
    <updated>2017-06-02T11:57:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a> 
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
